# docker-compose.yml
# Versión corregida y unificada para funcionar con un único .env y PostgreSQL.

version: '3.8'

services:
  # --- Servicio del Backend (Node.js/Express) ---
  backend:
    build: ./backend
    container_name: acuaponia-backend
    restart: unless-stopped
    env_file: .env # Carga toda la configuración desde el archivo .env central
    ports:
      - "5001:5001" # Expone el puerto del backend a la máquina host
    depends_on:
      - db      # El backend no se iniciará hasta que la base de datos esté lista
      - mqtt    # El backend no se iniciará hasta que el broker MQTT esté listo
    volumes:
      - ./backend:/app
      - /app/node_modules # Evita que node_modules local sobreescriba el del contenedor
    networks:
      - sena_network

  # --- Servicio del Frontend (React/Vite) ---
  frontend:
    build: ./frontend
    container_name: acuaponia-frontend
    restart: unless-stopped
    # El puerto se expone a través de Nginx, no directamente.
    # ports:
    #   - "3000:80" # Quitado para evitar conflicto con Nginx
    depends_on:
      - backend
    networks:
      - sena_network

  # --- Servicio de la Base de Datos (Cambiado a PostgreSQL) ---
  db:
    image: postgres:14-alpine
    container_name: acuaponia-db
    restart: unless-stopped
    env_file: .env # Carga las credenciales de la DB desde .env
    ports:
      - "5432:5432" # Expone el puerto de Postgres para conexión externa si es necesario
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sena_network

  # --- Servicio del Broker MQTT (Mosquitto) ---
  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: acuaponia-mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
    networks:
      - sena_network
  
  # --- Nginx como proxy reverso (Comentado para evitar conflicto inicial) ---
  # Nginx es la forma correcta de exponer el frontend en producción.
  # Para desarrollo, puedes acceder al frontend directamente si expones su puerto (ej: 3000:80).
  # Para usar Nginx, descomenta este bloque y asegúrate de que el puerto del frontend no esté expuesto.
  # nginx:
  #   image: nginx:alpine
  #   container_name: acuaponia-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - sena_network

volumes:
  postgres_data:
    driver: local

networks:
  sena_network:
    driver: bridge

